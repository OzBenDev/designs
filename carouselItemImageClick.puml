@startuml

skinparam sequence {
ArrowColor DeepSkyBlue
}

participant App
participant ChatController
participant ViewController_Fragment
participant BotChatHandler
participant UIElementController
participant ChatRecyclerAdapter
participant ChatUIProvider
participant ChatBubbleComponentViewHolder
participant CarouselItemsHolder
participant CarouselItemsView
participant CarouselViewHolder
participant ItemProperties.itemListener
participant CarouselItemsViewAdapter
participant CarouselItemHolder
participant CarouselItemViewContainer
participant User


== initialization ==

ChatController -> ViewController_Fragment: create
ViewController_Fragment -> UIElementController: create
ViewController_Fragment -> ChatRecyclerAdapter: create(UIElementController)
ChatController -> BotChatHandler: create

== Carousel Element Creation (most relevant flows) ==

BotChatHandler -> BotChatHandler: create CarouselElement(statementResponse)
BotChatHandler -> ChatRecyclerAdapter: addElement(CarouselElement)

== CarouselElement ViewHolder Creation (most relevant flows) ==

ChatRecyclerAdapter -> ChatUIProvider: getIncomingCarouselViewHolder(uiElementController)
ChatUIProvider -> CarouselItemsView: create - overridable adapter
CarouselItemsView -> CarouselItemsViewAdapter: create
ChatUIProvider -> CarouselItemsHolder: create (CarouselItemsView, uiElementController)

ChatUIProvider -> CarouselViewHolder: create(CarouselItemsHolder)
ChatUIProvider -> ChatBubbleComponentViewHolder: create (CarouselViewHolder)

== CarouselElement ViewHolder bind (most relevant flows) ==

ChatRecyclerAdapter -> ChatBubbleComponentViewHolder: bind(CarouselChatElement)
ChatBubbleComponentViewHolder -> CarouselItemsHolder: update(CarouselChatElement)
CarouselItemsHolder -[#Red]> ItemProperties.itemListener: <font color=red>setItemActionListener()
CarouselItemsHolder -> CarouselItemsView: setData(carouselItems, articleId)
CarouselItemsView -> CarouselItemsViewAdapter: setData(carouselItems, articleId)
CarouselItemsViewAdapter -> CarouselItemsViewAdapter: notifyDataChanged

CarouselItemsViewAdapter -> CarouselItemHolder: create

group #skyblue CarouselItemsViewAdapter bind
CarouselItemsViewAdapter -> CarouselItemHolder: bindData(ItemProperties)
    CarouselItemHolder -[#Red]> CarouselItemHolder: <font color=red>imageUrl = carouselDataItem.imageTargetLink
    group  #PeachPuff ItemProperties.itemListener != null && !(imageUrl.isNullOrEmpty)
       CarouselItemHolder -[#Red]> CarouselItemViewContainer: <font color=red>enableImageClick(click callback)
       CarouselItemViewContainer -[#Red]> CarouselItemViewContainer: <font color=red>enable ViewHolder click
       CarouselItemViewContainer -[#Red]> CarouselItemViewContainer: <font color=red>set View click listener
    end
end

== View Recycled ==

group #ivory ChatRecyclerAdapter vertical recycler

ChatRecyclerAdapter -> ChatBubbleComponentViewHolder: clear
ChatBubbleComponentViewHolder -> CarouselItemsHolder: clear
CarouselItemsHolder -> CarouselItemsView: clear
CarouselItemsView -> CarouselItemsViewAdapter: clear
CarouselItemsViewAdapter -[#Red]> ItemProperties.itemListener: <font color=red>clear (set to null)
end

group #ivory Carousel horizontal recycler
CarouselItemsViewAdapter -> CarouselItemHolder: clear
note right
ItemProperties.itemListener stays
Its global for the carouselItemsView,
Thus its being cleared when the carouselItemsView cleared
end note
CarouselItemHolder -[#Red]> CarouselItemViewContainer: <font color=red>clear clickListener
end

== User action - click on item image (click enabled) ==

User -> CarouselItemViewContainer: click on item image
CarouselItemViewContainer -[#Red]> CarouselItemHolder: <font color=red>callback
CarouselItemHolder -[#Red]> ItemProperties.itemListener: <font color=red>onImageClicked(imageUrl)
ItemProperties.itemListener -[#Red]> UIElementController: <font color=red>handleEvent(url click)
UIElementController -> BotChatHandler: handleEvent(url click)
BotChatHandler -> ChatController: handleEvent(url click)
ChatController -> App: onUrlLinkSelected(url click)

@enduml